openapi: 3.0.3
info:
  title: ArkRelay Gateway API
  version: 1.0.0
  description: Minimal OpenAPI spec enumerating all HTTP endpoints. Schemas can be enriched later.
servers:
  - url: http://localhost:8000
    description: Local development server
components:
  securitySchemes:
    AdminApiKey:
      type: apiKey
      in: header
      name: X-Admin-Key
      description: Admin API key required for all /admin endpoints
paths:
  /:
    get:
      summary: Welcome and service info
      responses:
        '200': { description: OK }
  /health:
    get:
      summary: Basic health check
      responses:
        '200': { description: OK }
  /ready:
    get:
      summary: Readiness probe
      responses:
        '200': { description: OK }
        '503': { description: Not ready }
  /health/comprehensive:
    get:
      summary: Comprehensive health via monitoring system
      responses:
        '200': { description: OK }
        '503': { description: Monitoring not initialized }
  /queue-status:
    get:
      summary: Queue and worker status
      responses:
        '200': { description: OK }
  /enqueue-demo:
    get:
      summary: Enqueue a demo job
      responses:
        '200': { description: OK }
  /enqueue-user-process:
    post:
      summary: Enqueue a per-user processing job
      responses:
        '200': { description: OK }
  /jobs:
    get:
      summary: List recent jobs
      responses:
        '200': { description: OK }
  /jobs/{job_id}:
    get:
      summary: Get job by ID
      responses:
        '200': { description: OK }
        '404': { description: Not found }
  /metrics:
    get:
      summary: Recent system metrics
      responses:
        '200': { description: OK }
  /monitoring/stats:
    get:
      summary: Monitoring performance stats
      responses:
        '200': { description: OK }
        '503': { description: Monitoring not initialized }
  /monitoring/alerts:
    get:
      summary: Active monitoring alerts
      responses:
        '200': { description: OK }
        '503': { description: Monitoring not initialized }
  /monitoring/cache/stats:
    get:
      summary: Cache performance stats
      responses:
        '200': { description: OK }
        '503': { description: Cache manager not initialized }
  /heartbeats:
    get:
      summary: Recent service heartbeats
      responses:
        '200': { description: OK }
  /grpc/arkd/info:
    get:
      summary: ARKD service information
      responses:
        '200': { description: OK }
        '503': { description: ARKD client unavailable }
  /grpc/tapd/balances:
    get:
      summary: Get Taproot Asset balances
      responses:
        '200': { description: OK }
        '503': { description: TAPD client unavailable }
  /rgb/health:
    get:
      summary: RGB service health check
      responses:
        '200':
          description: RGB service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  timestamp:
                    type: string
                  contracts_count:
                    type: integer
                  allocations_count:
                    type: integer
        '503':
          description: RGB service is unhealthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  error:
                    type: string
  /rgb/contracts:
    get:
      summary: List all RGB contracts
      parameters:
        - name: active_only
          in: query
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: List of RGB contracts
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RGBContract'
                  count:
                    type: integer
        '500': { description: Internal server error }
    post:
      summary: Register a new RGB contract
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RGBContractRegistration'
      responses:
        '201':
          description: RGB contract registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/RGBContract'
                  message:
                    type: string
        '400': { description: Bad request }
        '409': { description: Contract already exists }
        '500': { description: Internal server error }
  /rgb/contracts/{contract_id}:
    get:
      summary: Get RGB contract information
      parameters:
        - name: contract_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: RGB contract details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/RGBContract'
        '404': { description: Contract not found }
        '500': { description: Internal server error }
  /rgb/allocations:
    get:
      summary: Get RGB allocations with optional filtering
      parameters:
        - name: owner_pubkey
          in: query
          schema:
            type: string
        - name: contract_id
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of RGB allocations
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RGBAllocation'
                  count:
                    type: integer
        '400': { description: Bad request }
        '500': { description: Internal server error }
    post:
      summary: Create a new RGB allocation within a VTXO
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RGBAllocationCreation'
      responses:
        '201':
          description: RGB allocation created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/RGBAllocation'
                  message:
                    type: string
        '400': { description: Bad request }
        '409': { description: Allocation conflict }
        '500': { description: Internal server error }
  /rgb/allocations/transfer:
    post:
      summary: Transfer RGB allocation from one user to another
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RGBAllocationTransfer'
      responses:
        '200':
          description: RGB allocation transferred successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/RGBAllocationTransferResult'
                  message:
                    type: string
        '400': { description: Bad request }
        '500': { description: Internal server error }
  /rgb/vtxos/create:
    post:
      summary: Create a VTXO specifically for RGB allocations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RGBVTXOCreation'
      responses:
        '201':
          description: RGB VTXO created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/RGBVTXO'
                  message:
                    type: string
        '400': { description: Bad request }
        '500': { description: Internal server error }
  /rgb/vtxos/{vtxo_id}/split:
    post:
      summary: Split an RGB VTXO into multiple VTXOs with corresponding allocations
      parameters:
        - name: vtxo_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RGBVTXOSplit'
      responses:
        '200':
          description: RGB VTXO split successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '400': { description: Bad request }
        '500': { description: Internal server error }
  /rgb/vtxos/user/{user_pubkey}:
    get:
      summary: Get all RGB VTXOs for a user, optionally filtered by contract
      parameters:
        - name: user_pubkey
          in: path
          required: true
          schema:
            type: string
        - name: contract_id
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of RGB VTXOs
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RGBVTXO'
                  count:
                    type: integer
        '500': { description: Internal server error }
  /rgb/vtxos/{vtxo_id}/validate:
    get:
      summary: Validate the RGB state of a VTXO
      parameters:
        - name: vtxo_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: RGB VTXO validation result
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/RGBVTXOValidation'
        '500': { description: Internal server error }
  /rgb/proofs/validate:
    post:
      summary: Validate RGB proof data against contract
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RGBProofValidation'
      responses:
        '200':
          description: RGB proof validation result
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/RGBProofValidationResult'
                  message:
                    type: string
        '400': { description: Bad request }
        '500': { description: Internal server error }
  /rgb/stats:
    get:
      summary: Get RGB system statistics
      responses:
        '200':
          description: RGB system statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/RGBStats'
        '500': { description: Internal server error }
components:
  schemas:
    RGBContract:
      type: object
      properties:
        contract_id:
          type: string
        name:
          type: string
        description:
          type: string
        interface_id:
          type: string
        specification_id:
          type: string
        schema_type:
          type: string
        genesis_proof:
          type: string
        metadata:
          type: object
        creator_pubkey:
          type: string
        total_issued:
          type: integer
        current_state_root:
          type: string
        last_transition_txid:
          type: string
        asset_id:
          type: string
        asset_ticker:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    RGBContractRegistration:
      type: object
      required:
        - contract_id
        - name
        - interface_id
        - specification_id
        - genesis_proof
        - schema_type
      properties:
        contract_id:
          type: string
        name:
          type: string
        description:
          type: string
        interface_id:
          type: string
        specification_id:
          type: string
        genesis_proof:
          type: string
        schema_type:
          type: string
          enum: [cfa, nia, ria, uda]
        metadata:
          type: object
        creator_pubkey:
          type: string
        ticker:
          type: string
    RGBAllocation:
      type: object
      properties:
        allocation_id:
          type: string
        contract_id:
          type: string
        vtxo_id:
          type: string
        owner_pubkey:
          type: string
        amount:
          type: integer
        seal_type:
          type: string
        is_spent:
          type: boolean
        created_at:
          type: string
          format: date-time
    RGBAllocationCreation:
      type: object
      required:
        - contract_id
        - vtxo_id
        - owner_pubkey
        - amount
      properties:
        contract_id:
          type: string
        vtxo_id:
          type: string
        owner_pubkey:
          type: string
        amount:
          type: integer
        state_commitment:
          type: string
          format: byte
        proof_data:
          type: string
        seal_type:
          type: string
          default: tapret_first
    RGBAllocationTransfer:
      type: object
      required:
        - from_pubkey
        - to_pubkey
        - allocation_id
      properties:
        from_pubkey:
          type: string
        to_pubkey:
          type: string
        allocation_id:
          type: string
        amount:
          type: integer
    RGBAllocationTransferResult:
      type: object
      properties:
        from_allocation_id:
          type: string
        to_allocation_id:
          type: string
        contract_id:
          type: string
        amount:
          type: integer
        from_pubkey:
          type: string
        to_pubkey:
          type: string
        timestamp:
          type: string
          format: date-time
    RGBVTXO:
      type: object
      properties:
        vtxo_id:
          type: string
        txid:
          type: string
        vout:
          type: integer
        amount_sats:
          type: integer
        asset_id:
          type: string
        rgb_asset_type:
          type: string
        rgb_allocation_id:
          type: string
        status:
          type: string
        created_at:
          type: string
          format: date-time
        expires_at:
          type: string
          format: date-time
    RGBVTXOCreation:
      type: object
      required:
        - user_pubkey
        - asset_id
        - amount_sats
        - rgb_contract_id
      properties:
        user_pubkey:
          type: string
        asset_id:
          type: string
        amount_sats:
          type: integer
        rgb_contract_id:
          type: string
        rgb_allocation_data:
          type: object
    RGBVTXOSplit:
      type: object
      required:
        - split_amounts
      properties:
        split_amounts:
          type: array
          items:
            type: integer
        rgb_allocation_splits:
          type: array
          items:
            type: object
    RGBVTXOValidation:
      type: object
      properties:
        valid:
          type: boolean
        vtxo_id:
          type: string
        contract_id:
          type: string
        amount:
          type: integer
        rgb_asset_type:
          type: string
        proof_valid:
          type: boolean
        state_consistent:
          type: boolean
        allocation_id:
          type: string
        owner_pubkey:
          type: string
        error:
          type: string
    RGBProofValidation:
      type: object
      required:
        - proof_data
        - contract_id
      properties:
        proof_data:
          type: string
        contract_id:
          type: string
    RGBProofValidationResult:
      type: object
      properties:
        valid:
          type: boolean
        contract_id:
          type: string
    RGBStats:
      type: object
      properties:
        contracts:
          type: object
          properties:
            total:
              type: integer
            active:
              type: integer
            inactive:
              type: integer
        allocations:
          type: object
          properties:
            total:
              type: integer
            active:
              type: integer
            spent:
              type: integer
            total_value:
              type: integer
        schema_breakdown:
          type: array
          items:
            type: object
            properties:
              schema_type:
                type: string
              contract_count:
                type: integer
              total_issued:
                type: integer
        timestamp:
          type: string
          format: date-time
  /grpc/lnd/balances:
    get:
      summary: LND balances
      responses:
        '200': { description: OK }
        '503': { description: LND client unavailable }
  /grpc/reconnect/{service}:
    get:
      summary: Reconnect to a gRPC service
      responses:
        '200': { description: OK }
        '400': { description: Invalid service }
  /stats:
    get:
      summary: Summary stats (jobs, queue, metrics, gRPC)
      responses:
        '200': { description: OK }
  /nostr/start:
    post:
      summary: Start Nostr service
      responses:
        '200': { description: OK }
  /nostr/stop:
    post:
      summary: Stop Nostr service
      responses:
        '200': { description: OK }
  /nostr/status:
    get:
      summary: Nostr service status
      responses:
        '200': { description: OK }
  /nostr/send-dm:
    post:
      summary: Send encrypted DM
      responses:
        '200': { description: OK }
        '400': { description: Bad request or service not running }
  /nostr/publish-test:
    post:
      summary: Publish test event
      responses:
        '200': { description: OK }
        '400': { description: Service not running }
  /nostr/relays:
    get:
      summary: Configured Nostr relays
      responses:
        '200': { description: OK }
  /nostr/test-encryption:
    post:
      summary: Test encryption/decryption
      responses:
        '200': { description: OK }
        '400': { description: Service not running }
  /nostr/sessions:
    get:
      summary: Active Nostr signing sessions
      responses:
        '200': { description: OK }
  /sessions/create:
    post:
      summary: Create a signing session
      responses:
        '200': { description: OK }
        '400': { description: Invalid input }
  /sessions/{session_id}:
    get:
      summary: Get session info
      responses:
        '200': { description: OK }
        '404': { description: Not found }
  /sessions/{session_id}/challenge:
    post:
      summary: Create signing challenge
      responses:
        '200': { description: OK }
        '400': { description: Invalid state }
        '404': { description: Session not found }
  /sessions/{session_id}/respond:
    post:
      summary: Respond to challenge
      responses:
        '200': { description: OK }
        '400': { description: Invalid signature or challenge }
  /sessions/{session_id}/complete:
    post:
      summary: Complete a session
      responses:
        '200': { description: OK }
  /sessions/{session_id}/fail:
    post:
      summary: Mark a session as failed
      responses:
        '200': { description: OK }
  /sessions:
    get:
      summary: List sessions (optional filters)
      responses:
        '200': { description: OK }
  /sessions/cleanup:
    post:
    
      summary: Cleanup expired sessions and challenges
      responses:
        '200': { description: OK }
  /challenges/{challenge_id}:
    get:
      summary: Get challenge info
      responses:
        '200': { description: OK }
        '404': { description: Not found }
  /sessions/stats:
    get:
      summary: Get sessions statistics
      responses:
        '200': { description: OK }
  /transactions/p2p-transfer:
    post:
      summary: Process P2P transfer transaction
      responses:
        '200': { description: OK }
        '400': { description: Missing session_id }
  /transactions/{txid}/status:
    get:
      summary: Get transaction status
      responses:
        '200': { description: OK }
        '404': { description: Not found }
  /transactions/{txid}/broadcast:
    post:
      summary: Broadcast a transaction to the network
      responses:
        '200': { description: OK }
  /transactions/user/{user_pubkey}:
    get:
      summary: Get transactions for a user
      responses:
        '200': { description: OK }
  /signing/ceremony/start:
    post:
      summary: Start signing ceremony
      responses:
        '200': { description: OK }
        '400': { description: Missing session_id }
  /signing/ceremony/{session_id}/status:
    get:
      summary: Get signing ceremony status
      responses:
        '200': { description: OK }
  /signing/ceremony/{session_id}/step/{step}:
    post:
      summary: Execute a signing ceremony step
      responses:
        '200': { description: OK }
        '400': { description: Invalid step }
  /signing/ceremony/{session_id}/cancel:
    post:
      summary: Cancel a signing ceremony
      responses:
        '200': { description: OK }
  /assets:
    post:
      summary: Create asset
      responses:
        '200': { description: OK }
        '400': { description: Missing fields }
    get:
      summary: List assets
      responses:
        '200': { description: OK }
  /assets/{asset_id}:
    get:
      summary: Get asset info
      responses:
        '200': { description: OK }
        '404': { description: Not found }
  /assets/{asset_id}/mint:
    post:
      summary: Mint assets to a user
      responses:
        '200': { description: OK }
        '400': { description: Missing fields }
  /assets/transfer:
    post:
      summary: Transfer assets between users
      responses:
        '200': { description: OK }
        '400': { description: Missing fields }
  /balances/{user_pubkey}:
    get:
      summary: Get all balances for a user
      responses:
        '200': { description: OK }
  /balances/{user_pubkey}/{asset_id}:
    get:
      summary: Get balance for a specific asset
      responses:
        '200': { description: OK }
  /vtxos/{user_pubkey}:
    get:
      summary: Manage/list VTXOs for user
      responses:
        '200': { description: OK }
  /assets/stats:
    get:
      summary: Asset statistics
    
      responses:
        '200': { description: OK }
  /assets/cleanup-vtxos:
    post:
      summary: Cleanup expired VTXOs via asset manager
      responses:
        '200': { description: OK }
  /assets/{asset_id}/reserve:
    get:
      summary: Reserve requirements for asset
      responses:
        '200': { description: OK }
  /lightning/lift:
    post:
      summary: Create Lightning lift (on-ramp)
      responses:
        '200': { description: OK }
        '400': { description: Invalid input }
        '503': { description: Lightning unavailable }
  /lightning/land:
    post:
      summary: Process Lightning land (off-ramp)
      responses:
        '200': { description: OK }
        '400': { description: Invalid input }
        '503': { description: Lightning unavailable }
  /lightning/invoices/{payment_hash}:
    get:
      summary: Get Lightning invoice status
      responses:
        '200': { description: OK }
        '404': { description: Not found }
  /lightning/pay/{payment_hash}:
    post:
      summary: Pay Lightning invoice (land)
      responses:
        '200': { description: OK }
        '400': { description: Invalid request }
        '503': { description: Lightning unavailable }
  /lightning/balances:
    get:
      summary: Get Lightning balances
      responses:
        '200': { description: OK }
        '503': { description: Lightning unavailable }
  /lightning/channels:
    get:
      summary: List Lightning channels
      responses:
        '200': { description: OK }
        '503': { description: Lightning unavailable }
  /lightning/fees/estimate/{amount_sats}:
    get:
      summary: Estimate Lightning fees
      responses:
        '200': { description: OK }
        '503': { description: Lightning unavailable }
  /lightning/activity/{user_pubkey}:
    get:
      summary: Get user Lightning activity
      responses:
        '200': { description: OK }
        '503': { description: Lightning unavailable }
  /lightning/statistics:
    get:
      summary: Lightning operation statistics
      responses:
        '200': { description: OK }
        '503': { description: Lightning monitor unavailable }
  /lightning/monitor/health:
    get:
      summary: Lightning monitor health
      responses:
        '200': { description: OK }
        '503': { description: Lightning monitor unavailable }
  /lightning/invoices:
    get:
      summary: List Lightning invoices
      responses:
        '200': { description: OK }
        '503': { description: Lightning unavailable }
  /lightning/payments:
    get:
      summary: List Lightning payments
      responses:
        '200': { description: OK }
        '503': { description: Lightning unavailable }
  /vtxos/inventory/{asset_id}:
    get:
      summary: Get VTXO inventory status for asset
      responses:
        '200': { description: OK }
  /vtxos/batch/create:
    post:
      summary: Create a batch of new VTXOs
      responses:
        '200': { description: OK }
        '400': { description: Missing fields }
  /vtxos/assign:
    post:
      summary: Assign a VTXO to a user
      responses:
        '200': { description: OK }
        '404': { description: No available VTXO }
  /vtxos/user/{user_pubkey}:
    get:
      summary: Get VTXOs assigned to user
      responses:
        '200': { description: OK }
  /vtxos/mark-spent:
    post:
      summary: Mark VTXO as spent
      responses:
        '200': { description: OK }
  /vtxos/cleanup:
    post:
      summary: Cleanup expired VTXOs
      responses:
        '200': { description: OK }
  /vtxos/settlement/process:
    post:
      summary: Trigger VTXO settlement processing
      responses:
        '200': { description: OK }
  /vtxos/settlement/status:
    get:
      summary: Get settlement status
      responses:
        '200': { description: OK }
  /vtxos/monitor/start:
    post:
      summary: Start VTXO monitoring services
      responses:
        '200': { description: OK }
  /vtxos/monitor/stop:
    post:
      summary: Stop VTXO monitoring services
      responses:
        '200': { description: OK }
  /vtxos/monitor/status:
    get:
      summary: VTXO monitoring status
      responses:
        '200': { description: OK }
  /vtxos/stats:
    get:
      summary: VTXO statistics
      responses:
        '200': { description: OK }
  /admin/health/comprehensive:
    get:
      summary: Comprehensive health (admin)
      security:
        - AdminApiKey: []
      responses:
        '200': { description: OK }
  /admin/metrics/system:
    get:
      summary: System metrics (admin)
      security:
        - AdminApiKey: []
      responses:
        '200': { description: OK }
  /admin/alerts:
    get:
      summary: Active and recent alerts (admin)
      security:
        - AdminApiKey: []
      responses:
        '200': { description: OK }
  /admin/alerts/rules:
    get:
      summary: Alert rules (admin)
      security:
        - AdminApiKey: []
      responses:
        '200': { description: OK }
  /admin/alerts/rules/{rule_name}/toggle:
    post:
      summary: Enable/disable an alert rule (admin)
      security:
        - AdminApiKey: []
      responses:
        '200': { description: OK }
        '404': { description: Rule not found }
  /admin/jobs/statistics:
    get:
      summary: Job statistics (admin)
      security:
        - AdminApiKey: []
      responses:
        '200': { description: OK }
  /admin/services/status:
    get:
      summary: Services status and queue (admin)
      security:
        - AdminApiKey: []
      responses:
        '200': { description: OK }
  /admin/database/stats:
    get:
      summary: Database statistics (admin)
      security:
        - AdminApiKey: []
      responses:
        '200': { description: OK }
  /admin/system/info:
    get:
      summary: Detailed system info (admin)
      security:
        - AdminApiKey: []
      responses:
        '200': { description: OK }
  /admin/configuration:
    get:
      summary: Current configuration (admin)
      security:
        - AdminApiKey: []
      responses:
        '200': { description: OK }
  /admin/logs/recent:
    get:
      summary: Recent application logs (admin)
      security:
        - AdminApiKey: []
      responses:
        '200': { description: OK }
  /admin/maintenance/cleanup:
    post:
      summary: Clean up old data (admin)
      security:
        - AdminApiKey: []
      responses:
        '200': { description: OK }
  /admin/backup/create:
    post:
      summary: Create a database backup (admin)
      security:
        - AdminApiKey: []
      responses:
        '200': { description: OK }
  /admin/performance/profile:
    post:
      summary: Run performance profiling (admin)
      security:
        - AdminApiKey: []
      responses:
        '200': { description: OK }
  /admin/restart/service:
    post:
      summary: Restart a specific service (admin)
      security:
        - AdminApiKey: []
      responses:
        '200': { description: OK }
  /admin/dashboard/summary:
    get:
      summary: Dashboard summary (admin)
      security:
        - AdminApiKey: []
      responses:
        '200': { description: OK }
